// Code your testbench here
// or browse Examples

module CLB_tb;
  reg clk,reset,select_pin,wl;
  reg A,B,C;
  wire CLB_output;
  
  initial begin
     forever #2 clk=~clk; 
     forever #5 wl=~wl;
 end
  CLB dut(
    .clk(clk),
    .reset(reset),
    .select_pin(select_pin),
    .A(A),
    .B(B),
    .C(C),
    .wl(wl),
    .CLB_output(CLB_output)
  );
  initial begin
    clk=0;
    wl=1;
    reset=1;
    select_pin=0;
    A=0;
    B=0;
    C=0;
   #1 wl=0;
   reset=0;
   #3 select_pin=0;
    //reset=0;
    
//     A=0;
//     B=0;
//     C=0;
    
    A=0;
    B=0;
    C=1;
   
    #4 A=0;
    B=1;
    C=0;
    
    #4 A=0;
    B=1;
    C=1;
    
    #4 A=1;
    B=0;
    C=0;
    
    #4 A=1;
    B=0;
    C=1;
    
    #4 A=1;
    B=1;
    C=0;
    
    #4 A=1;
    B=1;
    C=1;
    select_pin=1;
   #4 A=0;
    B=0;
    C=0;
    
    #4 A=0;
    B=0;
    C=1;
    
      #4 A=0;
    B=1;
    C=0;
    
    #4 A=0;
    B=1;
    C=1;
    
    #4 A=1;
    B=0;
    C=0;
    
    #4 A=1;
    B=0;
    C=1;
    
    #4 A=1;
    B=1;
    C=0;
    
    #4 A=1;
    B=1;
    C=1;
    
    #4 A=0;
    B=0;
    C=0;
    #10
     $finish;  
  end

  initial begin
 $dumpfile("dump.vcd");
 $dumpvars;
 end
endmodule
 
 module sram_6t;
  
   initial begin
    wl=1;
     bl=0;
     blb=1;
    
     #12 wl=~wl;
     #16 bl=~bl;
     #25 blb=~blb;
  $finish;  
   end
    initial begin
  $dumpfile("dump.vcd");
  $dumpvars;
  end
  endmodule        

 module dff_tb;
 reg clk,reset,inp;
  wire outp;
  
   initial
    
     forever #4 clk=~clk;
  
    dff inst(clk,reset,inp,outp);
  
   initial begin
     reset=0;
     clk=1'b0;
    inp=1'b1;
     #5 inp=~inp;
     #13 inp=~inp;
    
   $finish;  
   end
  
   initial begin
  $dumpfile("dump.vcd");
  $dumpvars;
  end
 endmodule     