// Code your design here
module CLB(clk,reset,select_pin,A,B,C,wl,CLB_output);
  input clk,reset,select_pin;
  input A,B,C;
  input wl;
  reg [7:0]s0=8'b00001111;//s0==A
  reg [7:0]s1=8'b00110011;//s1==B
  reg [7:0]s2=8'b01010101;//s2==C
  reg [7:0]func;
  
  int address;	
  reg [7:0]memory;
  reg [7:0]sram_out;
  reg out,out_ff;
  output reg CLB_output;
  
  
  assign  func=s0&(s1|s2);
  
  always @(func or wl) begin  //write
    if(wl==1) begin
      for(int address=0;address<8;address=address+1) begin
      	memory[address]=func[address];
      end
    end 
  end
  
  always @(memory or wl) begin		//read
    if(wl==0) begin
      for(int address=0;address<8;address=address+1) begin
        sram_out[address]=memory[address];
      end
    end
  end
  
  always @(posedge clk) begin  
    if(~A && ~B && ~C) out=sram_out[0];
    else if(~A && ~B && C) out=sram_out[1];
    else if(~A && B && ~C) out=sram_out[2];
    else if(~A && B && C) out=sram_out[3];
    else if(A && ~B && ~C) out=sram_out[4];
    else if(A && ~B && C) out=sram_out[5];
    else if(A && B && ~C) out=sram_out[6];
    else if(A && B && C) out=sram_out[7];
    else out=1'bz;
  end
   always @(posedge clk) 
begin
 if(reset==1'b1)
  out_ff <= 1'b0; 
 else 
  out_ff <= out; 
end 
   always @(posedge clk) 
    begin
     if(reset==1) 
       out_ff<=0;
    
       else
         out_ff<=out;
   end
    
    assign CLB_output=select_pin? out:out_ff;
   always @(*) begin
     if(select_pin==1)
       CLB_output=out_ff;
     else
       CLB_output=out;
   end
    

endmodule
 module SRAM(address,Bit,wl,data_out);
   input address,wl;
   input Bit;
   output reg data_out;
   reg [7:0]memory;
  
   always @(address or Bit or wl) begin  //write
     if(wl==1) begin
       memory[address]=Bit;
       data_out=1'bz;
     end
   end
  
   always @(address or wl) begin		//read
     if(wl==0) begin
       data_out=memory[address];
     end
   end
 endmodule
 module dff(clk,reset,inp,outp);
   input clk,reset;
   input inp;
   output reg outp;
  
   always @(posedge clk) begin
     if(reset==1) begin
       outp<=0;
     end
       else
         outp<=inp;
     end
 endmodule
 module mux21(a,b,s,out);
   input a,b;
   input s;
   output reg out;
  
   always @(*)
     casex(s)
       1'b0: out=a;
       1'b1: out=b;
       default: out=1'bx;
     endcase
 endmodule
 